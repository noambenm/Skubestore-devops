pipeline {
    agent any

    parameters {
        string(name: 'CHANGED_SERVICES', defaultValue: '',
               description: 'Comma-separated list of services that have new Docker images.')
        string(name: 'BUILD_NUMBER', defaultValue: '',
               description: 'Build number for versioned Docker tag, e.g. "123" for v1.0.123')
    }

    stages {
        stage('Checkout DevOps Repo') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/fix-deployments']],
                          userRemoteConfigs: [[url: 'https://github.com/noambenm/Skubestore-devops.git']]])
            }
        }
        stage('Determine Changed K8s Manifests') {
            steps {
                script {
                    env.CHANGED_K8S_FILES = ''
                    def changedFilesRaw = sh(
                        script: """
                          git diff --diff-filter=AMR HEAD^ HEAD --name-only | grep '^k8s/' || true
                        """,
                        returnStdout: true
                    ).trim()

                    if (changedFilesRaw) {
                        def changedFilesList = changedFilesRaw.split('\n')
                        echo "Changed K8s files: ${changedFilesList}"
                        env.CHANGED_K8S_FILES = changedFilesList.join(',')
                    } else {
                        echo 'No changed K8s files detected.'
                    }
                }
            }
        }
        stage('Apply Changed K8s Manifests') {
            when {
                expression {
                    return env.CHANGED_K8S_FILES?.trim()
                }
            }
            steps {
                script {
                    def changedK8sList = env.CHANGED_K8S_FILES.split(',')
                    changedK8sList.each { file ->
                        echo "Applying: ${file}"
                        sh "kubectl apply -f ${file}"
                    }
                }
            }
        }
        stage('Set Deployment Images for Changed Services') {
            when {
                expression {
                    return params.CHANGED_SERVICES?.trim()
                }
            }
            steps {
                script {
                    def services = params.CHANGED_SERVICES.split(',')
                    services.each { service ->

                        def containerName = service.replace('-service', '-container')
                        def imageTag = "noambenm/skubestore-${service}:v1.0.${params.BUILD_NUMBER}"

                        echo "Updating deployment/skubestore-${service} container=${containerName} to ${imageTag}"

                        sh "kubectl config set-context --current --namespace=skubestore-stage"
                        sh """
                        kubectl set image \
                            deployment/skubestore-${service} \
                            ${containerName}=${imageTag}
                        """
                        sh "kubectl rollout status deployment/skubestore-${service} --timeout=60s"

                        sh "kubectl config set-context --current --namespace=skubestore-prod"
                        sh """
                        kubectl set image \
                            deployment/skubestore-${service} \
                            ${containerName}=${imageTag}
                        """
                        sh "kubectl rollout status deployment/skubestore-${service} --timeout=60s"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Finished pipeline (DevOps CD)."
        }
        success {
            echo "All changes successfully applied."
        }
        failure {
            echo "Deployment failed."
        }
    }
}
