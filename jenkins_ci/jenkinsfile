def changedServices = []

pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'noambenm'
        DOCKER_HUB_CREDENTIALS_ID = '0217fb0a-9362-4d11-9af3-89bde2cc5e3c'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: 'https://github.com/noambenm/Skubestore.git']]])
            }
        }

        stage('Determine Changed Services') {
            steps {
                script {
                    def allServices = [
                        'order-service',
                        'product-service',
                        'user-service',
                        'frontend-service'
                    ]

                    def changedFilesRaw = sh(
                        script: 'git diff HEAD^ HEAD --name-only || true',
                        returnStdout: true
                    ).trim()

                    if (changedFilesRaw) {
                        def changedFiles = changedFilesRaw.split('\n')
                        echo "Changed files: ${changedFiles}"

                        for (service in allServices) {
                            if (changedFiles.any { it.startsWith("${service}/") }) {
                                changedServices << service
                        }
                    }
                    } else {
                        echo 'No changed files detected (possibly first commit or empty diff).'
                }

                    if (changedServices.isEmpty()) {
                        echo 'No specific service folders changed. Skipping build/push.'
                    } else {
                        echo "Services changed: ${changedServices}"
                    }
            }
        }
    }

        stage('Build Docker Images') {
            when {
                expression { return !changedServices.isEmpty() }
            }
            steps {
                script {
                    def parallelBuilds = [:]

                    for (service in changedServices) {
                        def s = service
                        parallelBuilds[s] = {
                            def versionedTag = "${DOCKER_HUB_REPO}/skubestore-${s}:v1.0.${env.BUILD_NUMBER}"
                            def latestTag    = "${DOCKER_HUB_REPO}/skubestore-${s}:latest"

                            echo "Building ${s}..."

                            dir(s) {
                                sh """
                                    docker build -t ${versionedTag} -t ${latestTag} .
                                """
                            }
                        }
                    }
                    parallel parallelBuilds
                }
            }
        }

        // stage('Test Docker Images') {
        //     steps {
        //         script {
        //             sh "docker-compose up -d --build"
        //             sh "chmod +x tests/compose-test.sh"
        //             sh "./tests/compose-test.sh"
        //         }
        //     }
        //     post {
        //         always {
        //             sh "docker-compose down"
        //         }
        //     }
        // }

        stage('Push Docker Images') {
            when {
                expression { return !changedServices.isEmpty() }
            }
            steps {
                script {
                    def parallelPushes = [:]

                    for (service in changedServices) {
                        def s = service
                        parallelPushes[s] = {
                            def versionedTag = "${DOCKER_HUB_REPO}/skubestore-${s}:v1.0.${env.BUILD_NUMBER}"
                            def latestTag    = "${DOCKER_HUB_REPO}/skubestore-${s}:latest"

                            echo "Pushing ${s}..."

                            withDockerRegistry(
                                [ credentialsId: "${DOCKER_HUB_CREDENTIALS_ID}", url: '' ]
                            ) {
                                sh """
                                    docker push ${versionedTag}
                                    docker push ${latestTag}
                                """
                            }
                        }
                    }
                    parallel parallelPushes
                }
            }
        }
        stage('Trigger CD Pipeline') {
            when {
                expression { return !changedServices.isEmpty() }
            }
            steps {
                script {
                    // Build a comma-separated string of changed services, e.g. "order-service,product-service"
                    def servicesString = changedServices.join(',')

                    // Trigger the downstream (CD) pipeline
                    build job: 'skubestore_cd',
                        wait: true,
                        parameters: [
                            string(name: 'CHANGED_SERVICES', value: servicesString),
                            string(name: 'BUILD_NUMBER', value: env.BUILD_NUMBER)
                        ]
                }
            }
        }
}

    post {
        always {
            echo 'Pipeline execution complete. Doing final cleanup...'
            sh 'docker container prune -f'
            sh 'docker images --filter "dangling=true" -q | xargs -r docker rmi -f'
            sh '''
                docker images --filter "dangling=false" --format "{{.Repository}}:{{.Tag}}" | \
                grep -v ':latest$' | xargs -r docker rmi -f
            '''
            cleanWs()
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
