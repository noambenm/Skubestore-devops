apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: skubestore-ingress-prod
  namespace: skubestore-prod
  annotations:
    alb.ingress.kubernetes.io/group.name: skubestore-group
    alb.ingress.kubernetes.io/group.order: "10"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/healthcheck-path: /healthz
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/certificate-arn: >
      arn:aws:acm:us-east-1:590184057629:certificate/efccf17a-95f7-463e-9ca3-4f6a29804b13
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80, "HTTPS": 443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: >
      {"Type":"redirect","RedirectConfig":{"Protocol":"HTTPS","Port":"443","StatusCode":"HTTP_301"}}
    external-dns.alpha.kubernetes.io/hostname: skubestore.click
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ssl-redirect
                port:
                  name: use-annotation
    - host: skubestore.click
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: skubestore-ingress-stage
  namespace: skubestore-stage
  annotations:
    alb.ingress.kubernetes.io/group.name: skubestore-group
    alb.ingress.kubernetes.io/group.order: "20"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/healthcheck-path: /healthz
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:590184057629:certificate/133bcce7-a99c-48a8-9a19-c9d62ea88f10
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80, "HTTPS": 443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: >
      {"Type":"redirect","RedirectConfig":{"Protocol":"HTTPS","Port":"443","StatusCode":"HTTP_301"}}
    external-dns.alpha.kubernetes.io/hostname: stage.skubestore.click
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ssl-redirect
                port:
                  name: use-annotation
    - host: stage.skubestore.click
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 80

apiVersion: v1
kind: ConfigMap
metadata:
  name: skubestore-configmap
data:
  MYSQL_HOST: mysql-service
  MYSQL_USER: skubestore
  MYSQL_DATABASE: skubestore
  VITE_PRODUCT_SERVICE_URL: http://product-service:5000
  VITE_ORDER_SERVICE_URL: http://order-service:5000
  VITE_USER_SERVICE_URL: http://user-service:5000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-system-configmap
  namespace: kube-system
data:
  AWS_REGION: us-east-1
  HOSTED_ZONE_ID: Z05022711DDYB75JEHHOL

apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns
          image: k8s.gcr.io/external-dns/external-dns:v0.13.2
          args:
            - --source=service
            - --source=ingress
            - --domain-filter=skubestore.click
            - --provider=aws
            - --policy=sync
            - --aws-zone-type=public
            - --registry=txt
            - --txt-owner-id=$(HOSTED_ZONE_ID)
          env:
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: kube-system-configmap
                  key: AWS_REGION
            - name: HOSTED_ZONE_ID
              valueFrom:
                configMapKeyRef:
                  name: kube-system-configmap
                  key: HOSTED_ZONE_ID

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  labels:
    app: skubestore
spec:
  replicas: 2
  selector:
    matchLabels:
      service: frontend
  template:
    metadata:
      labels:
        service: frontend
        tier: frontend
        framework: react
    spec:
      containers:
      - name: frontend-container
        image: noambenm/skubestore-frontend-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        env:
        - name: VITE_PRODUCT_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: skubestore-configmap
              key: VITE_PRODUCT_SERVICE_URL
        - name: VITE_ORDER_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: skubestore-configmap
              key: VITE_ORDER_SERVICE_URL
        - name: VITE_USER_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: skubestore-configmap
              key: VITE_USER_SERVICE_URL
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: NodePort
  selector:
      service: frontend
  ports:
  - port: 80

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      service: mysql
  template:
    metadata:
      labels:
        service: mysql
        tier: db
    spec:
      containers:
      - name: mysql-container
        image: mysql:8.0.40-debian
        ports:
        - containerPort: 3306
        envFrom:
        - configMapRef:
            name: skubestore-configmap
        - secretRef:
            name: skubestore-secret
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    service: mysql
  ports:
  - port: 3306

apiVersion: v1
kind: Namespace
metadata:
  name: skubestore-prod
---
apiVersion: v1
kind: Namespace
metadata:
  name: skubestore-stage

apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-deployment
  labels:
    app: skubestore
spec:
  replicas: 2
  selector:
    matchLabels:
      service: order
  template:
    metadata:
      labels:
        service: order
        tier: backend
        framework: flask
    spec:
      containers:
      - name: order-container
        image: noambenm/skubestore-order-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: skubestore-configmap
        env:
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: skubestore-secret
                key: MYSQL_PASSWORD
      initContainers:
      - name: init-container
        image: noambenm/skubediver-divelog-init:v1.0-alpine3.20
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: skubestore-configmap
        - secretRef:
            name: skubestore-secret        
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
      service: order
  ports:
  - port: 5000

apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-deployment
  labels:
    app: skubestore
spec:
  replicas: 2
  selector:
    matchLabels:
      service: product
  template:
    metadata:
      labels:
        service: product
        tier: backend
        framework: flask
    spec:
      containers:
      - name: product-container
        image: noambenm/skubestore-product-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: skubestore-configmap
        env:
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: skubestore-secret
                key: MYSQL_PASSWORD        
      initContainers:
      - name: init-container
        image: noambenm/skubediver-divelog-init:v1.0-alpine3.20
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: skubestore-configmap
        - secretRef:
            name: skubestore-secret
      
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  selector:
      service: product
  ports:
  - port: 5000

apiVersion: v1
kind: Secret
metadata:
  name: skubestore-secret
type: Opaque
data:
  MYSQL_PASSWORD: cGFzc3dvcmQy
  MYSQL_ROOT_PASSWORD: cGFzc3dvcmQ=

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deployment
  labels:
    app: skubestore
spec:
  replicas: 2
  selector:
    matchLabels:
      service: user
  template:
    metadata:
      labels:
        service: user
        tier: backend
        framework: flask
    spec:
      containers:
      - name: user-container
        image: noambenm/skubestore-user-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: skubestore-configmap
        env:
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: skubestore-secret
                key: MYSQL_PASSWORD        
      initContainers:
      - name: init-container
        image: noambenm/skubediver-divelog-init:v1.0-alpine3.20
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: skubestore-configmap
        - secretRef:
            name: skubestore-secret
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  selector:
      service: user
  ports:
  - port: 5000

